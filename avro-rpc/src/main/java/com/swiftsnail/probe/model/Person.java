/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.swiftsnail.probe.model;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.swiftsnail.avro.probe.model\",\"fields\":[{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"boolean\"},{\"name\":\"salary\",\"type\":\"double\"},{\"name\":\"childrenCount\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int age;
  @Deprecated public CharSequence name;
  @Deprecated public boolean sex;
  @Deprecated public double salary;
  @Deprecated public int childrenCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(Integer age, CharSequence name, Boolean sex, Double salary, Integer childrenCount) {
    this.age = age;
    this.name = name;
    this.sex = sex;
    this.salary = salary;
    this.childrenCount = childrenCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return age;
    case 1: return name;
    case 2: return sex;
    case 3: return salary;
    case 4: return childrenCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: age = (Integer)value$; break;
    case 1: name = (CharSequence)value$; break;
    case 2: sex = (Boolean)value$; break;
    case 3: salary = (Double)value$; break;
    case 4: childrenCount = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'age' field.
   */
  public Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sex' field.
   */
  public Boolean getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(Boolean value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'salary' field.
   */
  public Double getSalary() {
    return salary;
  }

  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(Double value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'childrenCount' field.
   */
  public Integer getChildrenCount() {
    return childrenCount;
  }

  /**
   * Sets the value of the 'childrenCount' field.
   * @param value the value to set.
   */
  public void setChildrenCount(Integer value) {
    this.childrenCount = value;
  }

  /** Creates a new Person RecordBuilder */
  public static Person.Builder newBuilder() {
    return new Person.Builder();
  }

  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static Person.Builder newBuilder(Person.Builder other) {
    return new Person.Builder(other);
  }

  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static Person.Builder newBuilder(Person other) {
    return new Person.Builder(other);
  }

  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private int age;
    private CharSequence name;
    private boolean sex;
    private double salary;
    private int childrenCount;

    /** Creates a new Builder */
    private Builder() {
      super(Person.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.age)) {
        this.age = data().deepCopy(fields()[0].schema(), other.age);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.salary)) {
        this.salary = data().deepCopy(fields()[3].schema(), other.salary);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.childrenCount)) {
        this.childrenCount = data().deepCopy(fields()[4].schema(), other.childrenCount);
        fieldSetFlags()[4] = true;
      }
    }

    /** Creates a Builder by copying an existing Person instance */
    private Builder(Person other) {
            super(Person.SCHEMA$);
      if (isValidValue(fields()[0], other.age)) {
        this.age = data().deepCopy(fields()[0].schema(), other.age);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.salary)) {
        this.salary = data().deepCopy(fields()[3].schema(), other.salary);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.childrenCount)) {
        this.childrenCount = data().deepCopy(fields()[4].schema(), other.childrenCount);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'age' field */
    public Integer getAge() {
      return age;
    }

    /** Sets the value of the 'age' field */
    public Person.Builder setAge(int value) {
      validate(fields()[0], value);
      this.age = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'age' field */
    public Person.Builder clearAge() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public CharSequence getName() {
      return name;
    }

    /** Sets the value of the 'name' field */
    public Person.Builder setName(CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'name' field */
    public Person.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public Boolean getSex() {
      return sex;
    }

    /** Sets the value of the 'sex' field */
    public Person.Builder setSex(boolean value) {
      validate(fields()[2], value);
      this.sex = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'sex' field */
    public Person.Builder clearSex() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'salary' field */
    public Double getSalary() {
      return salary;
    }

    /** Sets the value of the 'salary' field */
    public Person.Builder setSalary(double value) {
      validate(fields()[3], value);
      this.salary = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'salary' field has been set */
    public boolean hasSalary() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'salary' field */
    public Person.Builder clearSalary() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'childrenCount' field */
    public Integer getChildrenCount() {
      return childrenCount;
    }

    /** Sets the value of the 'childrenCount' field */
    public Person.Builder setChildrenCount(int value) {
      validate(fields()[4], value);
      this.childrenCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'childrenCount' field has been set */
    public boolean hasChildrenCount() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'childrenCount' field */
    public Person.Builder clearChildrenCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.age = fieldSetFlags()[0] ? this.age : (Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (CharSequence) defaultValue(fields()[1]);
        record.sex = fieldSetFlags()[2] ? this.sex : (Boolean) defaultValue(fields()[2]);
        record.salary = fieldSetFlags()[3] ? this.salary : (Double) defaultValue(fields()[3]);
        record.childrenCount = fieldSetFlags()[4] ? this.childrenCount : (Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
